import asyncio
import config
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import random
import wikipedia
from keyboards import kb_wiki, kb_inline_search_categories, kb_inline_search_planets, kb_inline_search_continents

# –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

router = Router()
router_planets = Router()
router_continents = Router()

class ChoiceSearchCategoriesAndElements(StatesGroup):
    choice_search_categories = State()
    choice_search_planets = State()
    choice_search_continents = State()

# —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.token)

# –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

dp.include_router(router)
dp.include_router(router_planets)
dp.include_router(router_continents)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    name = message.chat.Ô¨Årst_name
    command_list = "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" \
                   "/info, /help - –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞\n" \
                   "/search - –ø–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏"
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}!\n–Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç –≤ Telegram! üòä")
    await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{command_list}")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É search
# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
@router.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π –ø–æ–∏—â–µ–º –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏!\n–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=kb_inline_search_categories)
    await state.set_state(ChoiceSearchCategoriesAndElements.choice_search_categories)

# –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "button_menu_search_categories")
async def cmd_search_categories(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb_inline_search_categories)
    await state.set_state(ChoiceSearchCategoriesAndElements.choice_search_categories)
    await callback.answer()

# –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ü–ª–∞–Ω–µ—Ç—ã –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
@router.callback_query(F.data == "button_category_planets")
async def cmd_search_planets(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(chosen_search_category="–ü–ª–∞–Ω–µ—Ç–∞")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω–µ—Ç—É:", reply_markup=kb_inline_search_planets)
    await state.set_state(ChoiceSearchCategoriesAndElements.choice_search_planets)
    await callback.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–ª–∞–Ω–µ—Ç—ã
@router.callback_query(ChoiceSearchCategoriesAndElements.choice_search_planets, F.data.startswith('button_planet_'))
async def print_search_planets(callback: types.CallbackQuery, state: FSMContext):
    planetCaption = callback.data.replace('button_planet_', '')

    user_data = await state.get_data()
    wiki_query = planetCaption + " " + user_data.get("chosen_search_category")

    await callback.message.answer(f'–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å \"{wiki_query}\"')

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏—é
    wikipedia.set_lang('ru')
    await callback.message.answer(f'–£–∂–µ –∏—â—É –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ –ø—Ä–æ {wiki_query}!\n–ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    wiki_results = wikipedia.search(wiki_query)
    if not wiki_results:
        await callback.message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏–º?', reply_markup=kb_wiki)
    else:
        page_wiki = wikipedia.page(wiki_results[0])
        await callback.message.answer('–í–æ—Ç, —á—Ç–æ —è –Ω–∞—à–µ–ª')
        await callback.message.answer(page_wiki.summary[:200])
        await callback.message.answer('–í–æ—Ç, –≥–¥–µ –æ–± —ç—Ç–æ–º —É–∫–∞–∑–∞–Ω–æ')
        await callback.message.answer(page_wiki.url)

    await callback.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫?", reply_markup=kb_inline_search_planets)

    await callback.answer()

# –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã –ø–ª–∞–Ω–µ—Ç—ã –ó–µ–º–ª—è"
@router.callback_query(F.data == "button_category_continents")
async def cmd_search_continents(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(chosen_search_category="–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç:", reply_markup=kb_inline_search_continents)
    await state.set_state(ChoiceSearchCategoriesAndElements.choice_search_continents)
    await callback.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞
@router.callback_query(ChoiceSearchCategoriesAndElements.choice_search_continents, F.data.startswith('button_continent_'))
async def print_search_continents(callback: types.CallbackQuery, state: FSMContext):
    continentCaption = callback.data.replace('button_continent_', '')

    user_data = await state.get_data()
    wiki_query = continentCaption + " " + user_data.get("chosen_search_category")

    await callback.message.answer(f'–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å \"{wiki_query}\"')

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏—é
    wikipedia.set_lang('ru')
    await callback.message.answer(f'–£–∂–µ –∏—â—É –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ –ø—Ä–æ {wiki_query}!\n–ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    wiki_results = wikipedia.search(wiki_query)
    if not wiki_results:
        await callback.message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏–º?', reply_markup=kb_wiki)
    else:
        page_wiki = wikipedia.page(wiki_results[0])
        await callback.message.answer('–í–æ—Ç, —á—Ç–æ —è –Ω–∞—à–µ–ª')
        await callback.message.answer(page_wiki.summary[:200])
        await callback.message.answer('–í–æ—Ç, –≥–¥–µ –æ–± —ç—Ç–æ–º —É–∫–∞–∑–∞–Ω–æ')
        await callback.message.answer(page_wiki.url)

    await callback.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫?", reply_markup=kb_inline_search_continents)

    await callback.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã info, help
@router.message(F.text.lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
@router.message(F.text.lower() == '–ø–æ–º–æ—â—å')
@router.message(F.text.lower() == 'info')
@router.message(F.text.lower() == 'help')
@router.message(Command("info"))
@router.message(Command("help"))
async def cmd_info(message: types.Message):
    command_list = "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" \
                   "/info, /help - –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞\n" \
                   "/search - –ø–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏"
    await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{command_list}")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ c–æ–æ–±—â–µ–Ω–∏–µ
@router.message(F.text)
async def msg_any(message: types.Message):
    await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª!')

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())